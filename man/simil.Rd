% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proxy.R
\name{simil}
\alias{simil}
\alias{dist}
\title{Compute similarity/distance between rows or columns of large matrices}
\usage{
simil(
  x,
  y = NULL,
  margin = 1,
  method = c("cosine", "correlation", "dice", "edice", "jaccard", "ejaccard", "fjaccard",
    "hamann", "faith", "simple matching"),
  mask = NULL,
  min_simil = NULL,
  rank = NULL,
  drop0 = FALSE,
  diag = FALSE,
  use_nan = NULL,
  sparse = TRUE,
  digits = 14
)

dist(
  x,
  y = NULL,
  margin = 1,
  method = c("euclidean", "chisquared", "kullback", "jeffreys", "jensen", "manhattan",
    "maximum", "canberra", "minkowski", "hamming"),
  mask = NULL,
  p = 2,
  smooth = 0,
  drop0 = FALSE,
  diag = FALSE,
  use_nan = NULL,
  sparse = TRUE,
  digits = 14
)
}
\arguments{
\item{x}{a \link[base:matrix]{base::matrix} or \link[Matrix:Matrix]{Matrix::Matrix} object. Dense matrices are covered to
the \link[Matrix:CsparseMatrix-class]{Matrix::CsparseMatrix} internally.}

\item{y}{if a \link[base:matrix]{base::matrix} or \link[Matrix:Matrix]{Matrix::Matrix} object is provided, proximity
between documents or features in \code{x} and \code{y} is computed.}

\item{margin}{integer indicating margin of similarity/distance computation. 1
indicates rows or 2 indicates columns.}

\item{method}{method to compute similarity or distance}

\item{mask}{a pattern matrix created using \code{\link[=mask]{mask()}} for masked similarity/distance computation.
The shape of the matrix must be the same as the resulting matrix.}

\item{min_simil}{the minimum similarity value to be recorded.}

\item{rank}{an integer value specifying top-n most similarity values to be
recorded.}

\item{drop0}{if \code{TRUE}, removes zero values to make the
similarity/distance matrix sparse. It has no effect when \code{dense = TRUE}.}

\item{diag}{if \code{TRUE}, only compute diagonal elements of the
similarity/distance matrix; useful when comparing corresponding rows or
columns of \code{x} and \code{y}.}

\item{use_nan}{if \code{TRUE}, returns \code{NaN} if the standard deviation of a vector
is zero when \code{method} is "correlation"; if all the values are zero in a
vector when \code{method} is "cosine", "chisquared", "kullback", "jeffreys" or
"jensen". Note that use of \code{NaN} makes the similarity/distance matrix
denser and therefore larger in RAM. If \code{FALSE}, return zero in same use
situations as above. If \code{NULL}, will also return zero but also generate a
warning (default).}

\item{sparse}{if \code{TRUE}, returns \link[Matrix:sparseMatrix]{Matrix::sparseMatrix} object. When neither
\code{min_simil} nor \code{rank} is used, dense matrices require less space in RAM.}

\item{digits}{determines rounding of small values towards zero. Use primarily
to correct floating point errors. Rounding is performed in C++ in a similar
way as \link[base:zapsmall]{base::zapsmall}.}

\item{p}{weight for Minkowski distance.}

\item{smooth}{adds a  fixed value to all the cells to avoid division by zero.
Only used when \code{method} is "chisquared", "kullback", "jeffreys" or "jensen".}
}
\description{
Fast similarity/distance computation function for large sparse matrices. You
can floor small similarity value to to save computation time and storage
space by an arbitrary threshold (\code{min_simil}) or rank (\code{rank}). You
can specify the number of threads for parallel computing via
\code{options(proxyC.threads)}.
}
\details{
\subsection{Available Methods}{

Similarity:
\itemize{
\item \code{cosine}: cosine similarity
\item \code{correlation}: Pearson's correlation
\item \code{jaccard}: Jaccard coefficient
\item \code{ejaccard}: the real value version of \code{jaccard}
\item \code{fjaccard}: Fuzzy Jaccard coefficient
\item \code{dice}: Dice coefficient
\item \code{edice}: the real value version of \code{dice}
\item \code{hamann}: Hamann similarity
\item \code{faith}: Faith similarity
\item \verb{simple matching}: the percentage of common elements
}
Distance:
\itemize{
\item \code{euclidean}: Euclidean distance
\item \code{chisquared}: chi-squared distance
\item \code{kullback}: Kullback–Leibler divergence
\item \code{jeffreys}: Jeffreys divergence
\item \code{jensen}: Jensen–Shannon divergence
\item \code{manhattan}: Manhattan distance
\item \code{maximum}: the largest difference between values
\item \code{canberra}: Canberra distance
\item \code{minkowski}: Minkowski distance
\item \code{hamming}: Hamming distance
}
See the vignette for how the similarity and distance are computed:
\code{vignette("measures", package = "proxyC")}
}

\subsection{Parallel Computing}{

It performs parallel computing using Intel oneAPI Threads Building Blocks.
The number of threads for parallel computing should be specified via
\code{options(proxyC.threads)} before calling the functions. If the value is -1,
all the available threads will be used. Unless the option is used, the
number of threads will be limited by the environmental variables
(\code{OMP_THREAD_LIMIT} or \code{RCPP_PARALLEL_NUM_THREADS}) to comply with CRAN
policy and offer backward compatibility.
}
}
\examples{
mt <- Matrix::rsparsematrix(100, 100, 0.01)
simil(mt, method = "cosine")[1:5, 1:5]
mt <- Matrix::rsparsematrix(100, 100, 0.01)
dist(mt, method = "euclidean")[1:5, 1:5]
}
\seealso{
zapsmall
}
