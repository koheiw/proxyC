[{"path":"https://koheiw.github.io/proxyC/articles/masking.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Masked Similarity Computation","text":"","code":"library(proxyC) library(Matrix)  mt1 <- rsparsematrix(100, 6, 1.0) colnames(mt1) <- c(\"a\", \"a\", \"d\", \"d\", \"e\", \"e\") mt2 <- rsparsematrix(100, 5, 1.0) colnames(mt2) <- c(\"a\", \"b\", \"c\", \"d\", \"e\")  (msk <- mask(colnames(mt1), colnames(mt2))) #> 6 x 5 sparse Matrix of class \"lgTMatrix\" #>   a b c d e #> a | . . . . #> a | . . . . #> d . . . | . #> d . . . | . #> e . . . . | #> e . . . . | (sim <- simil(mt1, mt2, margin = 2, method = \"cosine\", mask = msk, use_nan = TRUE)) #> 6 x 5 sparse Matrix of class \"dgTMatrix\" #>             a   b   c           d           e #> a  0.10463988 NaN NaN         NaN         NaN #> a -0.09258201 NaN NaN         NaN         NaN #> d         NaN NaN NaN -0.06961173         NaN #> d         NaN NaN NaN -0.07654895         NaN #> e         NaN NaN NaN         NaN -0.03211685 #> e         NaN NaN NaN         NaN  0.07722747"},{"path":"https://koheiw.github.io/proxyC/articles/masking.html","id":"execution-times","dir":"Articles","previous_headings":"","what":"Execution Times","title":"Masked Similarity Computation","text":"large matrices, can measures impact masked similarity computation.","code":"library(microbenchmark) library(ggplot2)  mt1 <- rsparsematrix(1000L, 2600L, 0.1) colnames(mt1) <- rep(letters, each = 100L) mt2 <- rsparsematrix(1000L, 26L, 0.1) colnames(mt2) <- letters msk <- mask(colnames(mt1), colnames(mt2))"},{"path":"https://koheiw.github.io/proxyC/articles/masking.html","id":"cosine-similarity","dir":"Articles","previous_headings":"Execution Times","what":"Cosine Similarity","title":"Masked Similarity Computation","text":"impact masking limited cosine similarity proxyC employs linear algebra extensively. computes similarity scores saves values unmasked pairs method either “cosine”, “correlation” “euclidean”.","code":"bm <- microbenchmark(     unmasked = simil(mt1, mt2, margin = 2, method = \"cosine\", mask = NULL, drop0 = TRUE),     masked = simil(mt1, mt2, margin = 2, method = \"cosine\", mask = msk, drop0 = TRUE) )  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/masking.html","id":"jaccard-similarity","dir":"Articles","previous_headings":"Execution Times","what":"Jaccard Similarity","title":"Masked Similarity Computation","text":"Masking greatest impact execution time methods proxyC computes saves Jaccard similarity scores unmasked pairs. expect see similar performance improvement ejaccard”, “fjaccard”, “edice”, “hamann”, “faith” ”simple matching”.","code":"bm <- microbenchmark(     unmasked = simil(mt1, mt2, margin = 2, method = \"jaccard\", mask = NULL, drop0 = TRUE),     masked = simil(mt1, mt2, margin = 2, method = \"jaccard\", mask = msk, drop0 = TRUE) )  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/masking.html","id":"object-sizes","dir":"Articles","previous_headings":"","what":"Object Sizes","title":"Masked Similarity Computation","text":"Masking also dramatically reduces sizes similarity matrices use_nan = FALSE.","code":"sim_um <- simil(mt1, mt2, margin = 2, method = \"cosine\", mask = NULL, use_nan = FALSE) sim_mk <- simil(mt1, mt2, margin = 2, method = \"cosine\", mask = msk, use_nan = FALSE)  print(object.size(sim_um), unit = \"KB\") #> 1081.2 Kb print(object.size(sim_mk), unit = \"KB\") #> 65.5 Kb"},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"notation","dir":"Articles","previous_headings":"","what":"Notation","title":"Similarity and Distance Measures in proxyC","text":"x→=[xi,xi+1,…,xn]y→=[yi,yi+1,…,yn] \\begin{gather} \\vec{x} = [x_i, x_{+ 1}, \\dots, x_n] \\\\ \\vec{y} = [y_i, y_{+ 1}, \\dots, y_n] \\end{gather} length vector n=||x→||n = ||\\vec{x}||, |x→||\\vec{x}| absolute values elements. Operations vectors element-wise: z→=x→y→n=||x→||=||y→||=||z→|| \\begin{gather} \\vec{z} = \\vec{x}\\vec{y} \\\\ n = ||\\vec{x}|| = ||\\vec{y}|| =||\\vec{z}|| \\end{gather} Summation elements vectors written using sigma without specifying range: ∑x→=∑=1nxi \\sum{\\vec{x}} = \\sum_{=1}^{n}{x_i} elements vector compared value pair square brackets, summation counting number elements equal (unequal) value: ∑[x→=1]=∑=1n[xi=1] \\sum{[\\vec{x} = 1]} = \\sum_{=1}^{n}{[x_i = 1]}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"similarity-measures","dir":"Articles","previous_headings":"","what":"Similarity Measures","title":"Similarity and Distance Measures in proxyC","text":"Similarity measures available proxyC::simil().","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"cosine-similarity-cosine","dir":"Articles","previous_headings":"Similarity Measures","what":"Cosine similarity (“cosine”)","title":"Similarity and Distance Measures in proxyC","text":"simil=∑x→y→∑x→2∑y→2 simil = \\frac{\\sum{\\vec{x}\\vec{y}}}{\\sqrt{\\sum{\\vec{x} ^ 2}} \\sqrt{\\sum{\\vec{y} ^ 2}}}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"pearson-correlation-coefficient-correlation","dir":"Articles","previous_headings":"Similarity Measures","what":"Pearson correlation coefficient (“correlation”)","title":"Similarity and Distance Measures in proxyC","text":"simil=Cov(x→,y→)Var(x→)Var(y→) simil = \\frac{Cov(\\vec{x},\\vec{y})}{Var(\\vec{x}) Var(\\vec{y})}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"jaccard-similarity-jaccard-and-ejaccard","dir":"Articles","previous_headings":"Similarity Measures","what":"Jaccard similarity (“jaccard” and “ejaccard”)","title":"Similarity and Distance Measures in proxyC","text":"values xx yy Boolean “jaccard”. e=∑x→y→w=user-provided weightsimil=e∑x→w+∑y→w−e \\begin{gather} e = \\sum{\\vec{x} \\vec{y}} \\\\ w = \\text{user-provided weight} \\\\ simil = \\frac{e}{\\sum{\\vec{x} ^ w} + \\sum{\\vec{y} ^ w} - e} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"fuzzy-jaccard-similarity-fjaccard","dir":"Articles","previous_headings":"Similarity Measures","what":"Fuzzy Jaccard similarity (“fjaccard”)","title":"Similarity and Distance Measures in proxyC","text":"values must 0≤x≤1.00 \\le x \\le 1.0 0≤y≤1.00 \\le y \\le 1.0. simil=∑min(x→,y→)∑max(x→,y→) simil = \\frac{\\sum{min(\\vec{x}, \\vec{y})}}{\\sum{max(\\vec{x}, \\vec{y})}}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"dice-similarity-dice-and-edice","dir":"Articles","previous_headings":"Similarity Measures","what":"Dice similarity (“dice” and “edice”)","title":"Similarity and Distance Measures in proxyC","text":"values xx yy Boolean “dice”. e=∑x→y→w=user-provided weightsimil=2e∑x→w+∑y→w \\begin{gather} e = \\sum{\\vec{x} \\vec{y}} \\\\ w = \\text{user-provided weight} \\\\ simil = \\frac{2 e}{\\sum{\\vec{x} ^ w} + \\sum{\\vec{y} ^ w}} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"hamann-similarity-hamann","dir":"Articles","previous_headings":"Similarity Measures","what":"Hamann similarity (“hamann”)","title":"Similarity and Distance Measures in proxyC","text":"e=∑x→y→n=||x→||=||y→||u=n−esimil=e−ue+u \\begin{gather} e = \\sum{\\vec{x} \\vec{y}} \\\\ n = ||\\vec{x}|| = ||\\vec{y}|| \\\\ u = n - e \\\\ simil = \\frac{e - u}{e + u} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"faith-similarity-faith","dir":"Articles","previous_headings":"Similarity Measures","what":"Faith similarity (“faith”)","title":"Similarity and Distance Measures in proxyC","text":"t=∑[x→=1][y→=1]f=∑[x→=0][y→=0]n=||x→||=||y→||simil=t+0.5fn \\begin{gather} t = \\sum{[\\vec{x} = 1][\\vec{y} = 1]} \\\\ f = \\sum{[\\vec{x} = 0][\\vec{y} = 0]} \\\\ n = ||\\vec{x}|| = ||\\vec{y}|| \\\\ simil = \\frac{t + 0.5 f}{n} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"simple-matching-matching","dir":"Articles","previous_headings":"Similarity Measures","what":"Simple matching (“matching”)","title":"Similarity and Distance Measures in proxyC","text":"simil=∑[x→=y→] simil = \\sum{[\\vec{x} = \\vec{y}]}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"distance-measures","dir":"Articles","previous_headings":"","what":"Distance Measures","title":"Similarity and Distance Measures in proxyC","text":"Similarity measures available proxyC::dist(). Smoothing vectors can performed method “chisquared”, “kullback”, “jefferys” “jensen”: value smooth added element x→\\vec{x} y→\\vec{y}.","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"manhattan-distance-manhattan","dir":"Articles","previous_headings":"Distance Measures","what":"Manhattan distance (“manhattan”)","title":"Similarity and Distance Measures in proxyC","text":"dist=∑|x→−y→| dist = \\sum{|\\vec{x} - \\vec{y}|}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"canberra-distance-canberra","dir":"Articles","previous_headings":"Distance Measures","what":"Canberra distance (“canberra”)","title":"Similarity and Distance Measures in proxyC","text":"dist=|x→−y→||x→|+|y→| dist = \\frac{|\\vec{x} - \\vec{y}|}{|\\vec{x}| + |\\vec{y}|}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"euclidian-euclidian","dir":"Articles","previous_headings":"Distance Measures","what":"Euclidian (“euclidian”)","title":"Similarity and Distance Measures in proxyC","text":"dist=∑x→2+y→2 dist = \\sum{\\sqrt{\\vec{x}^2 + \\vec{y}^2}}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"minkowski-distance-minkowski","dir":"Articles","previous_headings":"Distance Measures","what":"Minkowski distance (“minkowski”)","title":"Similarity and Distance Measures in proxyC","text":"p=user-provided parameterdist=(∑|x→−y→|p)1p \\begin{gather} p = \\text{user-provided parameter} \\\\ dist = \\left( \\sum{|\\vec{x} - \\vec{y}| ^ p} \\right) ^ \\frac{1}{p} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"hamming-distance-hamming","dir":"Articles","previous_headings":"Distance Measures","what":"Hamming distance (“hamming”)","title":"Similarity and Distance Measures in proxyC","text":"dist=∑[x→≠y→] dist = \\sum{[\\vec{x} \\ne \\vec{y}]}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"the-largest-difference-between-values-maximum","dir":"Articles","previous_headings":"Distance Measures","what":"The largest difference between values (“maximum”)","title":"Similarity and Distance Measures in proxyC","text":"dist=maxx→−y→ dist = \\max{\\vec{x} - \\vec{y}}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"chi-squared-divergence-chisquared","dir":"Articles","previous_headings":"Distance Measures","what":"Chi-squared divergence (“chisquared”)","title":"Similarity and Distance Measures in proxyC","text":"Oij=augmented matrix x→ y→Eij=matrix expected count Oijdist=∑(Oij−Eij)2Eij \\begin{gather} O_{ij} = \\text{augmented matrix } \\vec{x} \\text{ } \\vec{y} \\\\ E_{ij} = \\text{matrix expected count } O_{ij} \\\\ dist = \\sum{\\frac{(O_{ij} - E_{ij}) ^ 2}{ E_{ij}}} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"kullbackleibler-divergence-kullback","dir":"Articles","previous_headings":"Distance Measures","what":"Kullback–Leibler divergence (“kullback”)","title":"Similarity and Distance Measures in proxyC","text":"p→=x→∑x→q→=y→∑y→dist=∑q→log2q→p→ \\begin{gather} \\vec{p} = \\frac{\\vec{x}}{\\sum{\\vec{x}}} \\\\ \\vec{q} = \\frac{\\vec{y}}{\\sum{\\vec{y}}} \\\\ dist = \\sum{\\vec{q} \\log_2{\\frac{\\vec{q}}{\\vec{p}}}} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"jeffreys-divergence-jeffreys","dir":"Articles","previous_headings":"Distance Measures","what":"Jeffreys divergence (“jeffreys”)","title":"Similarity and Distance Measures in proxyC","text":"p→=x→∑x→q→=y→∑y→dist=∑q→log2q→p→+∑p→log2p→q→ \\begin{gather} \\vec{p} = \\frac{\\vec{x}}{\\sum{\\vec{x}}} \\\\ \\vec{q} = \\frac{\\vec{y}}{\\sum{\\vec{y}}} \\\\ dist = \\sum{\\vec{q} \\log_2{\\frac{\\vec{q}}{\\vec{p}}}} +         \\sum{\\vec{p} \\log_2{\\frac{\\vec{p}}{\\vec{q}}}} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"jensen-shannon-divergence-jensen","dir":"Articles","previous_headings":"Distance Measures","what":"Jensen-Shannon divergence (“jensen”)","title":"Similarity and Distance Measures in proxyC","text":"p→=x→∑x→q→=y→∑y→m→=12(p→+q→)dist=12∑q→log2q→m→+12∑p→log2p→m→ \\begin{gather} \\vec{p} = \\frac{\\vec{x}}{\\sum{\\vec{x}}} \\\\ \\vec{q} = \\frac{\\vec{y}}{\\sum{\\vec{y}}} \\\\ \\vec{m} = \\frac{1}{2} (\\vec{p} + \\vec{q}) \\\\ dist = \\frac{1}{2} \\sum{\\vec{q} \\log_2{\\frac{\\vec{q}}{\\vec{m}}}} +         \\frac{1}{2} \\sum{\\vec{p} \\log_2{\\frac{\\vec{p}}{\\vec{m}}}} \\end{gather}","code":""},{"path":"https://koheiw.github.io/proxyC/articles/measures.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Similarity and Distance Measures in proxyC","text":"Choi, S., Cha, S., & Tappert, C. C. (2010). survey binary similarity distance measures. Journal Systemics, Cybernetics Informatics, 8(1), 43–48. Nielsen, F. (2019). Jensen–Shannon Symmetrization Distances Relying Abstract Means. Entropy, 21(5), 485. https://doi.org/10.3390/e21050485 Jain, G., Mahara, T., & Tripathi, K. N. (2020). Survey Similarity Measures Collaborative Filtering-Based Recommender System. M. Pant, T. K. Sharma, O. P. Verma, R. Singla, & . Sikander (Eds.), Soft Computing: Theories Applications (pp. 343–352). Springer. https://doi.org/10.1007/978-981-15-0751-9_32 Miyamoto, S. (1990). Hierarchical Cluster Analysis Fuzzy Sets. S. Miyamoto (Ed.), Fuzzy Sets Information Retrieval Cluster Analysis (pp. 125–188). Springer Netherlands. https://doi.org/10.1007/978-94-015-7887-5_6","code":""},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"euclidean-distance","dir":"Articles","previous_headings":"","what":"Euclidean Distance","title":"Comparison of Execution Times","text":"","code":"library(Matrix) library(microbenchmark) library(ggplot2)  n_rows <- 1000L n_cols <- 1000L  # helper function to compute timings compute_timings_for_euclidean <- function(   n_rows = 1000L,   n_cols = 1000L,   density = 0.1,   times = 10L ) {   sparse_mat <- rsparsematrix(n_rows, n_cols, density)   dense_mat <- as.matrix(sparse_mat)    microbenchmark(     # Disabled due to long execution times     # \"proxy::dist\" = proxy::dist(dense_mat, method = \"euclidean\", diag = TRUE),     \"proxyC::dist\" = proxyC::dist(sparse_mat, method = \"euclidean\", diag = TRUE),     \"Rfast::Dist\" = Rfast::Dist(dense_mat, method = \"euclidean\"),     \"stats::dist\" = dist(dense_mat, method = \"euclidean\"),     \"parallelDist::parDist\" = parallelDist::parDist(dense_mat, method = \"euclidean\"),     # Force conversion to matrix because distances::distances uses lazy evaluation     \"distances::distances\" = as.matrix(distances::distances(dense_mat)),     times = times   ) }"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-95-sparsity","dir":"Articles","previous_headings":"Euclidean Distance","what":"1000 rows, 1000 columns, 95% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_euclidean(n_rows = n_rows, n_cols = n_cols, density = 0.05)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-50-sparsity","dir":"Articles","previous_headings":"Euclidean Distance","what":"1000 rows, 1000 columns, 50% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_euclidean(n_rows = n_rows, n_cols = n_cols, density = 0.5)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-5-sparsity","dir":"Articles","previous_headings":"Euclidean Distance","what":"1000 rows, 1000 columns, 5% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_euclidean(n_rows = n_rows, n_cols = n_cols, density = 0.95)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"pearson-correlation","dir":"Articles","previous_headings":"","what":"Pearson Correlation","title":"Comparison of Execution Times","text":"","code":"n_rows <- 1000L n_cols <- 1000L  # helper function to compute timings compute_timings_for_correlation <- function(   n_rows = 1000L,   n_cols = 1000L,   density = 0.1,   times = 10L ) {   sparse_mat <- rsparsematrix(n_rows, n_cols, density)   dense_mat <- as.matrix(sparse_mat)    microbenchmark(     \"coop::pcor\" = coop::pcor(dense_mat),     \"stats::cor\" = cor(dense_mat, method = \"pearson\"),     \"Rfast::cora\" = Rfast::cora(dense_mat, large = TRUE),     # Disabled due to long execution times     # \"proxy::simil\" = proxy::simil(dense_mat, margin = 2, method = \"correlation\", diag = TRUE),     \"proxyC::simil\" = proxyC::simil(sparse_mat, margin = 2, method = \"correlation\", diag = TRUE),     times = times   ) }"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-95-sparsity-1","dir":"Articles","previous_headings":"Pearson Correlation","what":"1000 rows, 1000 columns, 95% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_correlation(n_rows = n_rows, n_cols = n_cols, density = 0.05)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-50-sparsity-1","dir":"Articles","previous_headings":"Pearson Correlation","what":"1000 rows, 1000 columns, 50% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_correlation(n_rows = n_rows, n_cols = n_cols, density = 0.5)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/articles/timings.html","id":"rows-1000-columns-5-sparsity-1","dir":"Articles","previous_headings":"Pearson Correlation","what":"1000 rows, 1000 columns, 5% sparsity","title":"Comparison of Execution Times","text":"","code":"bm <- compute_timings_for_correlation(n_rows = n_rows, n_cols = n_cols, density = 0.95)  autoplot(bm)"},{"path":"https://koheiw.github.io/proxyC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kohei Watanabe. Maintainer, author, copyright holder. Robrecht Cannoodt. Author.","code":""},{"path":"https://koheiw.github.io/proxyC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Watanabe K, Cannoodt R (2025). proxyC: Computes Proximity Large Sparse Matrices. R package version 0.5.0, https://github.com/koheiw/proxyC.","code":"@Manual{,   title = {proxyC: Computes Proximity in Large Sparse Matrices},   author = {Kohei Watanabe and Robrecht Cannoodt},   year = {2025},   note = {R package version 0.5.0},   url = {https://github.com/koheiw/proxyC}, }"},{"path":"https://koheiw.github.io/proxyC/index.html","id":"proxyc-r-package-for-large-scale-similaritydistance-computation","dir":"","previous_headings":"","what":"Computes Proximity in Large Sparse Matrices","title":"Computes Proximity in Large Sparse Matrices","text":"proxyC computes proximity rows columns large matrices efficiently C++. optimized large sparse matrices using Armadillo Intel TBB libraries. Among several built-similarity/distance measures, computation correlation, cosine similarity Euclidean distance particularly fast. code originally written quanteda compute similarity/distance documents features large corpora, separated stand-alone package make available broader data scientific purposes.","code":""},{"path":"https://koheiw.github.io/proxyC/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Computes Proximity in Large Sparse Matrices","text":"Since proxyC v0.4.0, requires Intel oneAPI Threading Building Blocks parallel computing. Windows Mac users can download binary package CRAN, Linux users must install library executing commands :","code":"# Fedora, CentOS, RHEL sudo yum install tbb-devel  # Debian and Ubuntu sudo apt install libtbb-dev install.packages(\"proxyC\")"},{"path":"https://koheiw.github.io/proxyC/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Computes Proximity in Large Sparse Matrices","text":"","code":"require(Matrix) ## Loading required package: Matrix require(microbenchmark) ## Loading required package: microbenchmark require(ggplot2) ## Loading required package: ggplot2 require(magrittr) ## Loading required package: magrittr  # Set number of threads options(\"proxyC.threads\" = 8)  # Make a matrix with 99% zeros sm1k <- rsparsematrix(1000, 1000, 0.01) # 1,000 columns sm10k <- rsparsematrix(1000, 10000, 0.01) # 10,000 columns  # Convert to dense format dm1k <- as.matrix(sm1k)  dm10k <- as.matrix(sm10k)"},{"path":"https://koheiw.github.io/proxyC/index.html","id":"cosine-similarity-between-columns","dir":"","previous_headings":"","what":"Cosine similarity between columns","title":"Computes Proximity in Large Sparse Matrices","text":"sparse matrices, proxyC roughly 10 100 times faster proxy.","code":"bm1 <- microbenchmark(     \"proxy 1k\" = proxy::simil(dm1k, method = \"cosine\"),     \"proxyC 1k\" = proxyC::simil(sm1k, margin = 2, method = \"cosine\"),     \"proxy 10k\" = proxy::simil(dm10k, method = \"cosine\"),     \"proxyC 10k\" = proxyC::simil(sm10k, margin = 2, method = \"cosine\"),     times = 10 ) autoplot(bm1)"},{"path":"https://koheiw.github.io/proxyC/index.html","id":"cosine-similarity-greater-than-09","dir":"","previous_headings":"","what":"Cosine similarity greater than 0.9","title":"Computes Proximity in Large Sparse Matrices","text":"min_simil used, proxyC becomes even faster small similarity scores floored zero.  Flooring min_simil makes resulting object much smaller.","code":"bm2 <- microbenchmark(     \"proxyC all\" = proxyC::simil(sm1k, margin = 2, method = \"cosine\"),     \"proxyC min_simil\" = proxyC::simil(sm1k, margin = 2, method = \"cosine\", min_simil = 0.9),     times = 10 ) autoplot(bm2) proxyC::simil(sm10k, margin = 2, method = \"cosine\") %>%    object.size() %>%    print(units = \"MB\") ## 763 Mb proxyC::simil(sm10k, margin = 2, method = \"cosine\", min_simil = 0.9) %>%    object.size() %>%    print(units = \"MB\") ## 0.2 Mb"},{"path":"https://koheiw.github.io/proxyC/index.html","id":"top-10-correlation","dir":"","previous_headings":"","what":"Top-10 correlation","title":"Computes Proximity in Large Sparse Matrices","text":"rank used, proxyC returns top-n values.","code":"bm3 <- microbenchmark(     \"proxyC rank\" = proxyC::simil(sm1k, margin = 2, method = \"correlation\", rank = 10),     \"proxyC all\" = proxyC::simil(sm1k, margin = 2, method = \"correlation\"),     times = 10 ) autoplot(bm3)"},{"path":"https://koheiw.github.io/proxyC/reference/colSds.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard deviation of columns and rows of large matrices — colSds","title":"Standard deviation of columns and rows of large matrices — colSds","text":"Produces result apply(x, 1, sd) apply(x, 2, sd) without coercing matrix dense matrix. Values identical sd() floating point precision issue C++.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/colSds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard deviation of columns and rows of large matrices — colSds","text":"","code":"colSds(x)  rowSds(x)"},{"path":"https://koheiw.github.io/proxyC/reference/colSds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard deviation of columns and rows of large matrices — colSds","text":"x base::matrix Matrix::Matrix object.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/colSds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard deviation of columns and rows of large matrices — colSds","text":"","code":"mt <- Matrix::rsparsematrix(100, 100, 0.01) colSds(mt) #>   [1] 0.03885989 0.28565714 0.20000000 0.00000000 0.03500000 0.01200000 #>   [7] 0.00000000 0.13009875 0.00000000 0.00000000 0.04400000 0.00000000 #>  [13] 0.15869655 0.00820000 0.13000000 0.22131608 0.08000000 0.00000000 #>  [19] 0.19353271 0.05973502 0.17177890 0.00000000 0.03900000 0.00000000 #>  [25] 0.07700000 0.00000000 0.11909168 0.16099125 0.00000000 0.10017011 #>  [31] 0.11000000 0.00000000 0.00000000 0.11336167 0.05200000 0.00000000 #>  [37] 0.15000000 0.00000000 0.19000000 0.09400000 0.00000000 0.09120578 #>  [43] 0.11734848 0.02600000 0.03100000 0.11870445 0.15280208 0.00000000 #>  [49] 0.00000000 0.04500000 0.11055416 0.00000000 0.00380000 0.11000000 #>  [55] 0.13000000 0.23180887 0.05717906 0.00000000 0.00000000 0.00000000 #>  [61] 0.00000000 0.10000000 0.13231673 0.00220000 0.00000000 0.08900000 #>  [67] 0.30920393 0.04000000 0.20000000 0.14093838 0.04500000 0.08422499 #>  [73] 0.00000000 0.09600000 0.00000000 0.00000000 0.09671493 0.00000000 #>  [79] 0.03600000 0.01900000 0.00000000 0.11430952 0.00000000 0.13000000 #>  [85] 0.00000000 0.00000000 0.00000000 0.09400000 0.08600000 0.02100000 #>  [91] 0.18007848 0.22575295 0.14000000 0.00000000 0.00000000 0.00000000 #>  [97] 0.00000000 0.07700000 0.08300000 0.11000000 apply(mt, 2, sd) # the same #>   [1] 0.03885989 0.28565714 0.20000000 0.00000000 0.03500000 0.01200000 #>   [7] 0.00000000 0.13009875 0.00000000 0.00000000 0.04400000 0.00000000 #>  [13] 0.15869655 0.00820000 0.13000000 0.22131608 0.08000000 0.00000000 #>  [19] 0.19353271 0.05973502 0.17177890 0.00000000 0.03900000 0.00000000 #>  [25] 0.07700000 0.00000000 0.11909168 0.16099125 0.00000000 0.10017011 #>  [31] 0.11000000 0.00000000 0.00000000 0.11336167 0.05200000 0.00000000 #>  [37] 0.15000000 0.00000000 0.19000000 0.09400000 0.00000000 0.09120578 #>  [43] 0.11734848 0.02600000 0.03100000 0.11870445 0.15280208 0.00000000 #>  [49] 0.00000000 0.04500000 0.11055416 0.00000000 0.00380000 0.11000000 #>  [55] 0.13000000 0.23180887 0.05717906 0.00000000 0.00000000 0.00000000 #>  [61] 0.00000000 0.10000000 0.13231673 0.00220000 0.00000000 0.08900000 #>  [67] 0.30920393 0.04000000 0.20000000 0.14093838 0.04500000 0.08422499 #>  [73] 0.00000000 0.09600000 0.00000000 0.00000000 0.09671493 0.00000000 #>  [79] 0.03600000 0.01900000 0.00000000 0.11430952 0.00000000 0.13000000 #>  [85] 0.00000000 0.00000000 0.00000000 0.09400000 0.08600000 0.02100000 #>  [91] 0.18007848 0.22575295 0.14000000 0.00000000 0.00000000 0.00000000 #>  [97] 0.00000000 0.07700000 0.08300000 0.11000000"},{"path":"https://koheiw.github.io/proxyC/reference/colZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of zeros in columns and rows of large matrices — colZeros","title":"Number of zeros in columns and rows of large matrices — colZeros","text":"Produces result applying sum(x == 0) row column.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/colZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of zeros in columns and rows of large matrices — colZeros","text":"","code":"colZeros(x)  rowZeros(x)"},{"path":"https://koheiw.github.io/proxyC/reference/colZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of zeros in columns and rows of large matrices — colZeros","text":"x base::matrix Matrix::Matrix object.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/colZeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of zeros in columns and rows of large matrices — colZeros","text":"","code":"mt <- Matrix::rsparsematrix(100, 100, 0.01) colZeros(mt) #>   [1]  97  99  99 100  98  99  99  95  98  99  99  99  99  99  98  99  99  98 #>  [19]  99  99  99 100  99  99 100  99 100 100  98 100  98  99  99  99  99 100 #>  [37] 100  99  97 100 100  99  99 100  98 100 100  99 100  98  99  99 100 100 #>  [55]  99  99 100  98  99 100 100  97  99 100  99 100  96 100  99 100 100 100 #>  [73] 100 100  97  99  97 100 100 100  99  99  98 100 100  98  99  98  97  98 #>  [91] 100 100  98  98  98  99  98  99 100 100 apply(mt, 2, function(x) sum(x == 0)) # the same #>   [1]  97  99  99 100  98  99  99  95  98  99  99  99  99  99  98  99  99  98 #>  [19]  99  99  99 100  99  99 100  99 100 100  98 100  98  99  99  99  99 100 #>  [37] 100  99  97 100 100  99  99 100  98 100 100  99 100  98  99  99 100 100 #>  [55]  99  99 100  98  99 100 100  97  99 100  99 100  96 100  99 100 100 100 #>  [73] 100 100  97  99  97 100 100 100  99  99  98 100 100  98  99  98  97  98 #>  [91] 100 100  98  98  98  99  98  99 100 100"},{"path":"https://koheiw.github.io/proxyC/reference/crossprod.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-product of large sparse matrices — crossprod","title":"Cross-product of large sparse matrices — crossprod","text":"Compute (transposed) cross-product large sparse matrices using infrastructure simil() dist().","code":""},{"path":"https://koheiw.github.io/proxyC/reference/crossprod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-product of large sparse matrices — crossprod","text":"","code":"crossprod(x, y = NULL, min_prod = NULL, digits = 14)  tcrossprod(x, y = NULL, min_prod = NULL, digits = 14)"},{"path":"https://koheiw.github.io/proxyC/reference/crossprod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-product of large sparse matrices — crossprod","text":"x base::matrix Matrix::Matrix object. Dense matrices covered Matrix::CsparseMatrix internally. y base::matrix Matrix::Matrix object provided, proximity documents features x y computed. min_prod minimum product recorded. digits determines rounding small values towards zero. Use primarily correct floating point errors. Rounding performed C++ similar way base::zapsmall.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pattern matrix for masking — mask","title":"Create a pattern matrix for masking — mask","text":"Create pattern matrix simil() dist() enable masked similarity computation. matrix passed function, computes similarity scores cells TRUE.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pattern matrix for masking — mask","text":"","code":"mask(x, y = NULL)"},{"path":"https://koheiw.github.io/proxyC/reference/mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pattern matrix for masking — mask","text":"x numeric character vector matched . y numeric character vector matched x provided.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pattern matrix for masking — mask","text":"sparse logical matrix TRUE matched pairs.","code":""},{"path":"https://koheiw.github.io/proxyC/reference/mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pattern matrix for masking — mask","text":"","code":"mt1 <- Matrix::rsparsematrix(100, 6, 1.0) colnames(mt1) <- c(\"a\", \"a\", \"d\", \"d\", \"e\", \"e\") mt2 <- Matrix::rsparsematrix(100, 5, 1.0) colnames(mt2) <- c(\"a\", \"b\", \"c\", \"d\", \"e\")  (msk <- mask(colnames(mt1), colnames(mt2))) #> 6 x 5 sparse Matrix of class \"lgTMatrix\" #>   a b c d e #> a | . . . . #> a | . . . . #> d . . . | . #> d . . . | . #> e . . . . | #> e . . . . | simil(mt1, mt2, margin = 2, mask = msk, drop0 = TRUE) #> 6 x 5 sparse Matrix of class \"dgTMatrix\" #>             a b c           d           e #> a  0.14040326 . . .            .          #> a -0.02487187 . . .            .          #> d  .          . . 0.014260459  .          #> d  .          . . 0.007621309  .          #> e  .          . . .           -0.06406566 #> e  .          . . .           -0.08833690"},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute similarity/distance between rows or columns of large matrices — simil","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"Fast similarity/distance computation function large sparse matrices. can floor small similarity value save computation time storage space arbitrary threshold (min_simil) rank (rank). can specify number threads parallel computing via options(proxyC.threads).","code":""},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"","code":"simil(   x,   y = NULL,   margin = 1,   method = c(\"cosine\", \"correlation\", \"dice\", \"edice\", \"jaccard\", \"ejaccard\", \"fjaccard\",     \"hamann\", \"faith\", \"simple matching\"),   mask = NULL,   min_simil = NULL,   rank = NULL,   drop0 = FALSE,   diag = FALSE,   use_nan = NULL,   sparse = TRUE,   digits = 14 )  dist(   x,   y = NULL,   margin = 1,   method = c(\"euclidean\", \"chisquared\", \"kullback\", \"jeffreys\", \"jensen\", \"manhattan\",     \"maximum\", \"canberra\", \"minkowski\", \"hamming\"),   mask = NULL,   p = 2,   smooth = 0,   drop0 = FALSE,   diag = FALSE,   use_nan = NULL,   sparse = TRUE,   digits = 14 )"},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"x base::matrix Matrix::Matrix object. Dense matrices covered Matrix::CsparseMatrix internally. y base::matrix Matrix::Matrix object provided, proximity documents features x y computed. margin integer indicating margin similarity/distance computation. 1 indicates rows 2 indicates columns. method method compute similarity distance mask pattern matrix created using mask() masked similarity/distance computation. shape matrix must resulting matrix. min_simil minimum similarity value recorded. rank integer value specifying top-n similarity values recorded. drop0 TRUE, removes zero values make similarity/distance matrix sparse. effect dense = TRUE. diag TRUE, compute diagonal elements similarity/distance matrix; useful comparing corresponding rows columns x y. use_nan TRUE, returns NaN standard deviation vector zero method \"correlation\"; values zero vector method \"cosine\", \"chisquared\", \"kullback\", \"jeffreys\" \"jensen\". Note use NaN makes similarity/distance matrix denser therefore larger RAM. FALSE, return zero use situations . NULL, also return zero also generate warning (default). sparse TRUE, returns Matrix::sparseMatrix object. neither min_simil rank used, dense matrices require less space RAM. digits determines rounding small values towards zero. Use primarily correct floating point errors. Rounding performed C++ similar way base::zapsmall. p weight Minkowski distance. smooth adds  fixed value cells avoid division zero. used method \"chisquared\", \"kullback\", \"jeffreys\" \"jensen\".","code":""},{"path":[]},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":"available-methods","dir":"Reference","previous_headings":"","what":"Available Methods","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"Similarity: cosine: cosine similarity correlation: Pearson's correlation jaccard: Jaccard coefficient ejaccard: real value version jaccard fjaccard: Fuzzy Jaccard coefficient dice: Dice coefficient edice: real value version dice hamann: Hamann similarity faith: Faith similarity simple matching: percentage common elements Distance: euclidean: Euclidean distance chisquared: chi-squared distance kullback: Kullback–Leibler divergence jeffreys: Jeffreys divergence jensen: Jensen–Shannon divergence manhattan: Manhattan distance maximum: largest difference values canberra: Canberra distance minkowski: Minkowski distance hamming: Hamming distance See vignette similarity distance computed: vignette(\"measures\", package = \"proxyC\")","code":""},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":"parallel-computing","dir":"Reference","previous_headings":"","what":"Parallel Computing","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"performs parallel computing using Intel oneAPI Threads Building Blocks. number threads parallel computing specified via options(proxyC.threads) calling functions. value -1, available threads used. Unless option used, number threads limited environmental variables (OMP_THREAD_LIMIT RCPP_PARALLEL_NUM_THREADS) comply CRAN policy offer backward compatibility.","code":""},{"path":[]},{"path":"https://koheiw.github.io/proxyC/reference/simil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute similarity/distance between rows or columns of large matrices — simil","text":"","code":"mt <- Matrix::rsparsematrix(100, 100, 0.01) simil(mt, method = \"cosine\")[1:5, 1:5] #> Warning: x or y has vectors with all zero; consider setting use_nan = TRUE to set these values to NaN or use_nan = FALSE to suppress this warning #> 5 x 5 sparse Matrix of class \"dsTMatrix\" #>                #> [1,] 1 0 0 0 0 #> [2,] 0 1 0 0 0 #> [3,] 0 0 1 0 0 #> [4,] 0 0 0 1 0 #> [5,] 0 0 0 0 1 mt <- Matrix::rsparsematrix(100, 100, 0.01) dist(mt, method = \"euclidean\")[1:5, 1:5] #> 5 x 5 sparse Matrix of class \"dsTMatrix\" #>                                         #> [1,] 0.00 0.3300000 0.00 0.8200000 0.00 #> [2,] 0.33 0.0000000 0.33 0.8839118 0.33 #> [3,] 0.00 0.3300000 0.00 0.8200000 0.00 #> [4,] 0.82 0.8839118 0.82 0.0000000 0.82 #> [5,] 0.00 0.3300000 0.00 0.8200000 0.00"},{"path":[]},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.5.0","text":"Enable simil() nad dist() perform masked similarity/distance computation. pattern matrix given via mask argument, computes scores selected pairs rows columns. Pattern matrices can created using newly added mask() function. Calculate “dice” “edice” using Armadillo’s linear algebra functions simil(). result, computation scores became fast “cosine”, “correlation” “euclidean”. Add crossprod() tcrossprod() using infrastructure simil() dist().","code":""},{"path":[]},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-4-2","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.4.2","text":"Reduce overhead dense similarity matrices improving rounding numbers conversion Rcpp vectors. Return dense matrix sparse = FALSE save space RAM.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-041","dir":"Changelog","previous_headings":"","what":"proxyC 0.4.1","title":"proxyC 0.4.1","text":"CRAN release: 2024-04-07","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.4.1","text":"Make detection Intel oneAPI Threads Building Blocks (TBB) library reliable.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-040","dir":"Changelog","previous_headings":"","what":"proxyC 0.4.0","title":"proxyC 0.4.0","text":"CRAN release: 2024-04-05","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.4.0","text":"Use recent Intel oneAPI Threads Building Blocks (TBB) library improve stability parallel computing. Add options(proxyC.threads) control number threads parallel computing (RCPP_PARALLEL_NUM_THREADS still effect).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-system-requirements-0-4-0","dir":"Changelog","previous_headings":"","what":"New system requirements","title":"proxyC 0.4.0","text":"RcppParallel package longer required TBB library operating system (Linux MacOS) Rtools (Windows) used. Linux MacOS must TBB library enable parallel computing installing package source.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-034","dir":"Changelog","previous_headings":"","what":"proxyC 0.3.4","title":"proxyC 0.3.4","text":"CRAN release: 2023-10-25","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.3.4","text":"Add “fjaccard” simil() Fuzzy Jaccard similarity (#42).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-033","dir":"Changelog","previous_headings":"","what":"proxyC 0.3.3","title":"proxyC 0.3.3","text":"CRAN release: 2022-10-06","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-3-3","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.3.3","text":"Explicitly setting use_nan = FALSE suppress warnings simil() dist(). Add vignettes explain similarity distance measures computed.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-032","dir":"Changelog","previous_headings":"","what":"proxyC 0.3.2","title":"proxyC 0.3.2","text":"CRAN release: 2022-09-05","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.3.2","text":"Make changes Matrix v1.4-2.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-031","dir":"Changelog","previous_headings":"","what":"proxyC 0.3.1","title":"proxyC 0.3.1","text":"CRAN release: 2022-08-22","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-3-1","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.3.1","text":"Add “jensen” dist() Jensen-Shannon divergence symmetric version Kullback-Leibler divergence. Change x y coerced dgCMatrix Matrix v1.4-2.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-030","dir":"Changelog","previous_headings":"","what":"proxyC 0.3.0","title":"proxyC 0.3.0","text":"CRAN release: 2022-08-05","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.3.0","text":"Add “jeffreys” dist() Jeffreys divergence. symmetric version Kullback-Leibler divergence (#31).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-024","dir":"Changelog","previous_headings":"","what":"proxyC 0.2.4","title":"proxyC 0.2.4","text":"CRAN release: 2021-12-10","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-and-improvements-0-2-4","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"proxyC 0.2.4","text":"rowSds(), colSds(), rowZeros() colZeros() return row column names. also work dense sparse matrices (#28).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-023","dir":"Changelog","previous_headings":"","what":"proxyC 0.2.3","title":"proxyC 0.2.3","text":"CRAN release: 2021-11-16","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.2.3","text":"Change “hamman” “hamann” simil() correct misspelling (#26).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-022","dir":"Changelog","previous_headings":"","what":"proxyC 0.2.2","title":"proxyC 0.2.2","text":"CRAN release: 2021-10-27","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.2.2","text":"simil() dist() work dense sparse matrices. use_nan = TRUE can used correlation distance similarity measures.","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-021","dir":"Changelog","previous_headings":"","what":"proxyC 0.2.1","title":"proxyC 0.2.1","text":"CRAN release: 2021-09-02","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.2.1","text":"Computing correlation similarity vectors standard deviation generate zero correlation warning. warning can turned setting use_nan = TRUE, case computed correlation similarity NaN instead (#21).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.2.1","text":"Fixed infinite values returned correlation similarity (#20).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-020","dir":"Changelog","previous_headings":"","what":"proxyC 0.2.0","title":"proxyC 0.2.0","text":"CRAN release: 2021-05-11","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.2.0","text":"Added diag argument compute similarity/distance corresponding rows columns (#13). Added smooth parameter chisquared kullback leibler distances solve negative values sparse matrices (#15). Added hamming distance (#18)","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.2.0","text":"Fixed chi-squared distance match stats::chisq.test() (#14). Fixed bug pairwise similarity/distance computation drop0 = TRUE (#17).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-015","dir":"Changelog","previous_headings":"","what":"proxyC 0.1.5","title":"proxyC 0.1.5","text":"CRAN release: 2019-07-21","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.1.5","text":"Add drop0 argument address floating point precision issue (#10).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.1.5","text":"digit argument now passed dist() (#11).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-014","dir":"Changelog","previous_headings":"","what":"proxyC 0.1.4","title":"proxyC 0.1.4","text":"CRAN release: 2019-06-04","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-1-4","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.1.4","text":"Add rowSds(), colSds(), rowZeros() colZeros() (#9).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"proxyc-013","dir":"Changelog","previous_headings":"","what":"proxyC 0.1.3","title":"proxyC 0.1.3","text":"CRAN release: 2019-04-21","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"proxyC 0.1.3","text":"longer assumes symmetry resulting matrix x != y (#4).","code":""},{"path":"https://koheiw.github.io/proxyC/news/index.html","id":"new-features-0-1-3","dir":"Changelog","previous_headings":"","what":"New features","title":"proxyC 0.1.3","text":"Add digits argument correct rounding errors C++ (#5).","code":""}]
